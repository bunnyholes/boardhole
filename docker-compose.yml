services:
  postgres:
    image: postgres:17-alpine
    container_name: boardhole-postgres
    environment:
      POSTGRES_USER: boardhole
      POSTGRES_PASSWORD: boardhole123
      POSTGRES_DB: boardhole
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U boardhole -d boardhole" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - boardhole-network

  redis:
    image: redis:7-alpine
    container_name: boardhole-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - boardhole-network

  app:
    build:
      context: .
      dockerfile: Dockerfile
      # BuildKit 활성화로 캐시 마운트 지원
      args:
        DOCKER_BUILDKIT: 1
    stop_grace_period: 30s
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      #      SPRING_PROFILES_ACTIVE: dev
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/boardhole
      SPRING_DATASOURCE_USERNAME: boardhole
      SPRING_DATASOURCE_PASSWORD: boardhole123
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      JAVA_OPTS: -Xms512m -Xmx1g -XX:+UseG1GC -Duser.timezone=Asia/Seoul
      # 애플리케이션 설정
      BOARDHOLE_CORS_ALLOWED_ORIGINS: http://localhost:3000,http://localhost:8080
      BOARDHOLE_DEFAULT_USERS_ADMIN_PASSWORD: Admin123!

    ports:
      - "8081:8080"
    volumes:
      - app-logs:/app/logs
    networks:
      - boardhole-network

volumes:
  postgres-data:
  redis-data:
  app-logs:

networks:
  boardhole-network:
