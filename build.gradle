plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.github.ben-manes.versions' version '0.52.0'
}

// 아래 속성들은 gradle.properties에서 자동으로 참조됩니다:
// - version: 프로젝트 버전
// - group: 프로젝트 그룹 ID  
// - description: 프로젝트 설명

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }

}

repositories {
    mavenCentral()
}

dependencies {

    // -- Core Spring Boot Starters --
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    // Email dependencies removed - will be replaced with JWT-based email verification later
    // implementation 'org.springframework.boot:spring-boot-starter-mail'

    // -- View (Thymeleaf) --
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6:3.1.3.RELEASE'

    // -- Development Tools --
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // -- Session Management (Redis) --
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.session:spring-session-data-redis'

    // -- Health & Monitoring --
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // -- API Documentation (SpringDoc) --
    // noinspection VulnerableLibrariesLocal
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.12"

    // -- Null Safety (JSpecify) --
    implementation "org.jspecify:jspecify:1.0.0"

    // -- Mapping (MapStruct) --
    implementation "org.mapstruct:mapstruct:1.6.3"
    annotationProcessor "org.mapstruct:mapstruct-processor:1.6.3"
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"

    // -- Lombok --
    compileOnly "org.projectlombok:lombok:1.18.42"
    annotationProcessor "org.projectlombok:lombok:1.18.42"

    // -- Database Drivers --
    runtimeOnly "org.postgresql:postgresql:42.7.8"

    // -- Logging (JSON encoder, opt-in in prod) --
    implementation "net.logstash.logback:logstash-logback-encoder:8.1"

    // -- Dev only --
    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'

    // -- Actuator (Observability) --
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // -- Testing --
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:postgresql'


    // -- RestAssured for E2E testing --
    testImplementation 'io.rest-assured:rest-assured:5.5.6'
    testImplementation 'io.rest-assured:json-path:5.5.6'
    testImplementation 'io.rest-assured:xml-path:5.5.6'

    // -- Testing utilities --
    testImplementation 'org.awaitility:awaitility:4.3.0'

    // -- In-memory database for integration-style tests without Docker --
    testImplementation 'com.h2database:h2:2.3.232'

}

tasks.named('test') {
    useJUnitPlatform {
        excludeTags 'e2e'
    }
    maxParallelForks = Runtime.runtime.availableProcessors() ?: 1
}

// E2E 테스트 전용 태스크
tasks.register('e2eTest', Test) {
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath

    useJUnitPlatform {
        includeTags 'e2e'
    }
    maxParallelForks = Runtime.runtime.availableProcessors() ?: 1
}

// Domain entity 테스트만 실행하는 태스크
tasks.register('entityTest', Test) {
    group = 'verification'
    description = 'Runs only domain entity-focused tests.'

    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath

    useJUnitPlatform()

    include '**/*EntityTest.class'
    include '**/EntityTestBaseSmokeTest.class'

    filter {
        failOnNoMatchingTests = false
    }

    maxParallelForks = Runtime.runtime.availableProcessors() ?: 1
}

// View 레이어 테스트만 실행하는 태스크 (MockMvc 기반 뷰 테스트)
tasks.register('viewTest', Test) {
    group = 'verification'
    description = 'Runs only tests tagged with @Tag("view") using the MockMvc-based test suites.'

    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath

    useJUnitPlatform {
        includeTags 'view'
    }

    filter {
        failOnNoMatchingTests = false
    }

    maxParallelForks = Runtime.runtime.availableProcessors() ?: 1
}

// Repository 테스트만 실행하는 태스크
tasks.register('repositoryTest', Test) {
    group = 'verification'
    description = 'Runs only repository tests (*RepositoryTest classes).'

    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath

    useJUnitPlatform {
        excludeTags 'e2e'
    }

    include '**/*RepositoryTest.class'

    filter {
        failOnNoMatchingTests = false
    }

    maxParallelForks = Runtime.runtime.availableProcessors() ?: 1
}

// REST API 컨트롤러 테스트만 실행하는 태스크 (View 컨트롤러 제외)
tasks.register('restTest', Test) {
    group = 'verification'
    description = 'Runs REST controller tests while excluding view-layer controllers and E2E suites.'

    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath

    useJUnitPlatform {
        excludeTags 'e2e'
        excludeTags 'view'
    }

    include '**/*ControllerTest.class'
    exclude '**/view/**'
    exclude '**/*ViewControllerTest.class'

    filter {
        failOnNoMatchingTests = false
    }

    maxParallelForks = Runtime.runtime.availableProcessors() ?: 1
}

// Resource filtering for @project.version@ placeholder replacement
processResources {
    filteringCharset = 'UTF-8'
    filesMatching('**/*.yml') {
        expand(project.properties)
    }
    filesMatching('**/*.yaml') {
        expand(project.properties)
    }
    filesMatching('**/*.properties') {
        expand(project.properties)
    }
}

// JAR 파일 이름에 버전 포함
bootJar {
    archiveFileName = "${project.name}-${project.version}.jar"
}
